#+TITLE: Emacs Config
#+STARTUP: overview
#+options: toc:nil date:nil

* Custom functions
- A set of custom functions defined for convinience (all my functions have the prefix =my/=)
- Some function are defined later in the context of certain packages

** my/duplicate-line
- I have grown accustomed to this function thanks to IntelliJ IDEA...
#+BEGIN_SRC emacs-lisp
  (defun my/duplicate-line()
    "Copies the current line and to the kill-ring and yanks it in the following line."
    (interactive)
    (save-excursion
      (let ((beg (line-beginning-position)))
        (forward-line 1)
        (copy-region-as-kill beg (point))
        (yank))))
#+END_SRC

** my/kill-all-buffers
- Kills all buffers
#+BEGIN_SRC emacs-lisp
  (defun my/kill-all-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (buffer-list)))
#+END_SRC

** my/unfill-paragraph
- Reverse the effect of =fill-paragraph=
#+BEGIN_SRC emacs-lisp
  (defun my/unfill-paragraph ()
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))
#+END_SRC

* Global configuration
- Appearance, behaviour and certain global modes are configured here

** package
- Connect to the ELPA archive via the direct IPv4 address to work
  around some IPv6 or IPv4 IP lookup issues
#+BEGIN_SRC emacs-lisp
  (setq package-archives
	'(("gnu" . "https://209.51.188.89/packages/")))
#+END_SRC

- Add the MELPA archive to the list of sources for =package= (which is initialized in [[init.el]])
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC

- Since Emacs 25.1 =package= keeps track of the user installed packages in a custom variable

** custom
- Set up the file to save custom variables in the be [[file:custom.el][custom.el]]
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

** Appearance
*** General appearance
- Disable menu bar, tool bar and scrool bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

- Enable line numbers globally
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC

- Don't show startup screen (obsolete: now set in [[file:custom.el][custom.el]] as =(inhibit-startup-screen t)=)

*** Theming
- Use same height for all faces
#+BEGIN_SRC emacs-lisp
  (setq monokai-height-plus-1 1.0
        monokai-height-plus-2 1.0
        monokai-height-plus-3 1.0
        monokai-height-plus-4 1.0
        monokai-height-minus-1 1.0)
#+END_SRC

- Set the color =monokai-gray= to its value before commit [[https://github.com/oneKelvinSmith/monokai-emacs/commit/65970ea4a15891962784701c75c391c19023a559][65970ea]] of =monokai=
#+BEGIN_SRC emacs-lisp
  (setq monokai-gray "#3E3D31")
#+END_SRC

- Set theme to =monokai= (this gives Emacs a Sublime Text like apparence)
#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai t)
#+END_SRC

*** Windows
- Window ruleset stolen from [[https://protesilaos.com/dotemacs][Prot]]

#+BEGIN_SRC emacs-lisp
  (setq display-buffer-alist
	'(
	  ("\\*Completions\\*"
	   (display-buffer-in-side-window)
	   (window-height . 0.25)
	   (side . bottom)
	   (slot . 1)
	   (window-parameters . ((no-other-window . t))))
	  ("\\*\\(e?shell\\|Python\\)\\*"
	   (display-buffer-in-side-window)
	   (window-height . 0.25)
	   (side . bottom)
	   (slot . 0))))
#+END_SRC

** Behaviour
*** Directories
- Add the directory with manually downloaded or own modes to the =load-path=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/vendor/")
#+END_SRC

- Save all backed-up files in one directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC

*** General behaviour
- CUA Mode (binds paste, copy and cut to C-v, C-c, C-x; enables rectangular regions)
#+BEGIN_SRC emacs-lisp
  (cua-mode)
#+END_SRC

- For working dead keys
#+BEGIN_SRC emacs-lisp
  (use-package iso-transl)
#+END_SRC

- Ask for =y-or-n= insted of =yes-or-no=
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Key bindings
- Bind =C-x k= to =kill-this-buffer= instead of =kill-buffer= which
  asks for which buffer to kill
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

- Bind =ibuffer= to =C-x C-b=
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

- Bind =my/duplicate line= to =C-d=
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-d") 'my/duplicate-line)
#+END_SRC

- Bind =my/unfill-paragraph= to =M-Q=
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-Q") 'my/unfill-paragraph)
#+END_SRC

- Bind =pomidor= to =F5=
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "<f5>") 'pomidor)
#+END_SRC

- Bind =my/kill-all-buffers= to =F9=
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f9>") 'my/kill-all-buffers)
#+END_SRC

* Load and configure individual packages
- Individual packages are loaded and configured here.

** aspell
- Set default spellchecking to =aspell=
#+BEGIN_SRC emacs-lisp
  (setq-default ispell-program-name "aspell")
#+END_SRC

** electric-pair-mode
- Automatically inserts parenthesis in pairs
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

** eshell
- A [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][Howardism]] I stole for quickly using the =eshell= in the current directory (slight modification on the =eshell/x= function though)
#+BEGIN_SRC emacs-lisp
  (defun my/eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))))
    
  (global-set-key (kbd "C-!") 'my/eshell-here)

  (defun eshell/x ()
    (eshell-life-is-too-much)
    (delete-window))
#+END_SRC

** expand-region
- IntelliJ IDEA like selecting regions by semantic units
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :init
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** ido
- Enable =ido= for better =C-x C-f= and =C-x b=
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (ido-mode t))
#+END_SRC

** iedit
- Edit occurances of the same text simultaniously
#+BEGIN_SRC emacs-lisp
  (use-package iedit)
#+END_SRC

** magit
- Bind =magit-satus= to =C-x g=
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** move-text
- Move the current line using M-up / M-down
#+BEGIN_SRC emacs-lisp
  (move-text-default-bindings)
#+END_SRC

** multiple-cursors
- Multiple cursors for Emacs
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :init
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/-all-like-this))
#+end_src

** nasm-mode
- Syntax highlighting for NASM assembler
#+BEGIN_SRC emacs-lisp
  (use-package nasm-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.asm" . nasm-mode)))
#+END_SRC

** powerline
- Emacs fork of VIM's powerline, a better looking, more informative status bar
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :init
    (powerline-default-theme))
#+END_SRC

** tramp
- Load =tramp=
#+BEGIN_SRC emacs-lisp
  (use-package tramp)
#+END_SRC

** whitespace
- Set up =whitespace=, a minor-mode for displaying whitespace characters
#+BEGIN_SRC emacs-lisp
  (use-package whitespace)
#+END_SRC

** 6502-mode
- Syntax highlighting for 6502 assembler ([[http://www.tomseddon.plus.com/beeb/6502-mode.html][6502-mode]])
#+BEGIN_SRC emacs-lisp
  (use-package 6502-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.s65" . 6502-mode)))
#+END_SRC

** qb-mode
- Syntax highlighting in QBasic files made by me
#+BEGIN_SRC emacs-lisp
  (use-package qb-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.BAS" . qb-mode)))
#+END_SRC

* Major mode configuration
- Major modes that depend on packages loaded above are configured here
- All manually added hooks go here as well

** Dired							      :issue:
- Issue: requires =tramp= to be loaded?

- Set switches for dired to =-lha= for long format (required by =dired=), human readable file size, show all files and list directories first
#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lha --group-directories-first")
#+END_SRC

- Activate the =dired-find-alternate-file= command
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

- Don't truncate long lines in dired mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook (lambda () (toggle-truncate-lines t)))
#+END_SRC

** LaTeX / AucTeX
- Load and set up =auctex= and enable =preview-latex=
#+BEGIN_SRC emacs-lisp
  (load "auctex.el" nil t t)
  (load "preview-latex.el" nil t t)
#+END_SRC

- Parse LaTeX files on save and load; query for master file
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save nil)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
#+END_SRC

- Set up =pdf-tools= to work with SyncTeX
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (setq TeX-source-correlate-start-server t)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)
#+END_SRC

** Org mode
*** Agenda settings
- Save =org-agenda= files in an external file
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files "~/.emacs.d/org-agenda-files")
#+END_SRC

- Bind =org-agenda= to =f12=
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "<f12>") 'org-agenda)
#+END_SRC

- Add new task states for tasks that need to be reviewed (=NEEDSREVIEW=) and tasks
  that currently are in review (=INREVIEW=); add a state for cancelled tasks
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO"
                    "WAITING"
                    "NEEDSREVIEW"
                    "INREVIEW"
                    "|" "DONE" "CANCELLED")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "#F92672" :weight bold)
          ("WAITING" :foreground "#F92672" :weight bold)
          ("NEEDSREVIEW" :foreground "#F92672" :weight bold)
          ("INREVIEW" :foreground "#66D9EF" :weight bold)
          ("DONE" :foreground "#A6E22E" :weight bold)
          ("CANCELLED" :foreground "#A6E22E" :weight bold)))
#+END_SRC

*** Appearance
- Change the three ellipsis to a more expressive symbol
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ▶")
#+END_SRC

*** Code block settings
- Set up syntax highlighting and native TAB behaviour in =org= code blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

- Edit source block in current window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** Hooks
- Add =auto-fill-mode= to the =org-mode= hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (auto-fill-mode t)))
#+END_SRC

- Disable =electric-indent-mode= in =org-mode= buffers
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
#+END_SRC

*** Export settings
- Enable beamer export
#+BEGIN_SRC emacs-lisp
  (use-package ox-beamer)
#+END_SRC

- Don't show personal information in the footer of exported html files
#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

- Don't export LaTeX with hyperref
#+BEGIN_SRC emacs-lisp
  (setq org-latex-with-hyperref nil)
#+END_SRC

- Use booktabs properly
#+BEGIN_SRC emacs-lisp
  (setq org-latex-tables-booktabs t)
#+END_SRC

- Use pdflatex (default)
#+BEGIN_SRC emacs-lisp
  ;; (setq org-latex-pdf-process 
  ;;   '("pdflatex -interaction nonstopmode -output-directory %o %f"
  ;;     "pdflatex -interaction nonstopmode -output-directory %o %f"
  ;;     "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

- Use xelatex instead of pdflatex
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process 
    '("xelatex -interaction nonstopmode %f"
      "xelatex -interaction nonstopmode %f"))
#+END_SRC

*** Define new classes for LaTeX export
**** LaTeX
- Define a LaTeX class for scrartcl
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("scrartcl"
                 "\\documentclass{scrartcl}
                  \\usepackage[T1]{fontenc} 
                  \\usepackage[utf8]{inputenc}
                  \\usepackage[]{babel}
                  \\usepackage{booktabs}
                  [NO-DEFAULT-PACKAGES]
                  [PACKAGES]
                  [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")))
#+END_SRC

**** XeTeX
- Define a XeTeX class for exporting roleplaying notes (XeTeX for the
  use of ttf fonts)
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("rpgnotes"
                 "\\documentclass[DIV=15, twocolumn=true]{scrartcl}
                  \\usepackage[english]{babel}
                  \\usepackage[T1]{fontenc}
                  \\usepackage[utf8]{inputenc}
                  \\usepackage{hyperref}
                  \\usepackage{booktabs}
                  \\usepackage{xltxtra}
                  [NO-DEFAULT-PACKAGES]
                  [PACKAGES]
                  [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

